name: Build

on:
  workflow_call:
    inputs:
      os-name:
        type: string
        required: true
      program:
        type: string
        required: true
      version:
        type: string
        required: true
      suffix:
        type: string
        required: false
    outputs:
      artefact_name:
        value: ${{jobs.build.outputs.artefact_name}}

permissions:
  contents: read

jobs:

  build:

    runs-on: ${{inputs.os-name}}
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Unpack YAML
      run: |
        mkdir tmp
        url=https://github.com/rik-howard/rho-system/releases/download
        wget $url/0.2.1/rho-system-0.2.1.tar.gz --directory-prefix=tmp
        mv etc/*.yaml* .

    - name: Set up cache
      uses: actions/cache@v4
      with:
        key: ${{runner.os}}-Stack-${{hashFiles ('**/stack.yaml.lock')}}
        path: |
          ~/.stack
          .stack-work
        restore-keys: ${{runner.os}}-Stack-

    - name: Install Stack
      uses: haskell-actions/setup@v2
      with:
        ghc-version: '9.8.4'
        cabal-version: '3.12.1.0'
        stack-version: '3.3.1'
        enable-stack: true

    - name: Update Stack
      run: stack update

    - name: Set up Stack
      run: stack setup

    - name: Build dependencies
      run: stack build --only-dependencies

    - name: Debug
      run: |
        ls -al ~/.stack
        du -sh ~/.stack
        ls -al .stack-work
        du -sh .stack-work
        find . -type f -name stack.yaml.lock
        find . -type f -name stack.yaml.lock -exec sha256sum {} \;

    #- name: Build dependent
    #  run: stack build

    #- name: Run tests
    #  run: stack test

    #- name: Determine artefact
    #  id: determine-artefact
    #  shell: bash
    #  run: |
    #    PGM=${{inputs.program}}
    #    VSN=${{inputs.version}}
    #    SYS=$(uname -s  | tr [:upper:] [:lower:])
    #    MAC=$(uname -m)
    #    ART=$PGM-$VSN-$SYS-$MAC${{inputs.suffix}}
    #    BIN=$(stack path --local-install-root)/bin
    #    EXE=$PGM-exe${{inputs.suffix}}
    #    echo $PGM
    #    echo $VSN
    #    echo $SYS
    #    echo $MAC
    #    echo $ART
    #    echo $BIN
    #    echo $EXE
    #    # ls -l $BIN
    #    cp $BIN/$EXE $ART
    #    echo artefact_name=$ART >> $GITHUB_OUTPUT

    #- name: Upload executable
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: ${{steps.determine-artefact.outputs.artefact_name}}
    #    path: ${{steps.determine-artefact.outputs.artefact_name}}
    #    if-no-files-found: error

    #outputs:
    #  artefact_name: ${{steps.determine-artefact.outputs.artefact_name}}
